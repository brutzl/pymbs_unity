/* This file was generated by PyMbs on 2022-01-13 19:26:02 UTC */
using System
using MathNet.Numerics.LinearAlgebra

int pendulum_der_state(double time, double[] y), out double[] yd)
{
    /* declare state variables */
    double q = y[0]; /*q*/
    double der_q = 0;
    double qd = y[1]; /*qd*/
    double der_qd = 0;

    /* Parameters */
    double m = 1;  /*m*/
    double l = 1;  /*l*/
    double Inertia = (0.0833333333333333 * m * Math.Exp(l,2));  /*Inertia*/
    double g = 9.81;  /*g*/

    /* Constants */

    /* User Expression variables */

    /* ordinary variables */
    double T_visual_1[3][3] = {{0}};  /*T_visual_1*/
    double int_I_body_1[3][3] = {{0}};  /*int_I_body_1*/
    double cosq_joint_1_Ry = 0; 
    double int_l_body_1[3] = {0};  /*int_l_body_1*/
    double int_l_tilde_body_1[3][3] = {{0}};  /*int_l_tilde_body_1*/
    double sinq_joint_1_Ry = 0; 
    double int_G_M_body_1_body_1[3] = {0};  /*int_G_M_body_1_body_1*/
    double M_ = 0;  /*M_*/
    double int_omega_body_1[3] = {0};  /*int_omega_body_1*/
    double int_omega_tilde_body_1[3][3] = {{0}};  /*int_omega_tilde_body_1*/
    double int_omegad_C_body_1[3] = {0};  /*int_omegad_C_body_1*/
    double int_alpha_C_world[3] = {0};  /*int_alpha_C_world*/
    double int_G_C_body_1[3] = {0};  /*int_G_C_body_1*/
    double C_ = 0;  /*C_*/
    double qdd = 0;  /*qdd*/

    /* calculate state derivative */
    T_visual_1[1,1] = 1;
    int_I_body_1[1,1] = (Inertia * Math.Exp(T_visual_1[1,1],2));
    cosq_joint_1_Ry = Math.Cos(q);
    T_visual_1[2,2] = cosq_joint_1_Ry;
    int_l_body_1[2] = (-(0.5 * l * T_visual_1[2,2]));
    int_l_tilde_body_1[1,0] = int_l_body_1[2];
    int_l_tilde_body_1[1,1] = 0;
    sinq_joint_1_Ry = Math.Sin(q);
    T_visual_1[0,2] = sinq_joint_1_Ry;
    int_l_body_1[0] = (-(0.5 * l * T_visual_1[0,2]));
    int_l_tilde_body_1[1,2] = (-int_l_body_1[0]);
    int_G_M_body_1_body_1[2] = (-(m * int_l_body_1[0]));
    int_G_M_body_1_body_1[0] = (m * int_l_body_1[2]);
    int_G_M_body_1_body_1[1] = 0;
    M_ = ((int_G_M_body_1_body_1[0] * int_l_tilde_body_1[1,0]) + (int_G_M_body_1_body_1[1] * int_l_tilde_body_1[1,1]) + (int_G_M_body_1_body_1[2] * int_l_tilde_body_1[1,2]) + int_I_body_1[1,1]);
    int_omega_body_1[0] = 0;
    int_omega_tilde_body_1[1,2] = (-int_omega_body_1[0]);
    T_visual_1[0,1] = 0;
    int_I_body_1[0,1] = (Inertia * T_visual_1[0,1] * T_visual_1[1,1]);
    T_visual_1[2,1] = 0;
    int_I_body_1[2,1] = (Inertia * T_visual_1[1,1] * T_visual_1[2,1]);
    int_I_body_1[2,0] = (Inertia * T_visual_1[0,1] * T_visual_1[2,1]);
    int_I_body_1[0,2] = (Inertia * T_visual_1[0,1] * T_visual_1[2,1]);
    int_I_body_1[0,0] = (Inertia * Math.Exp(T_visual_1[0,1],2));
    int_I_body_1[2,2] = (Inertia * Math.Exp(T_visual_1[2,1],2));
    int_I_body_1[1,0] = (Inertia * T_visual_1[0,1] * T_visual_1[1,1]);
    int_omega_tilde_body_1[1,1] = 0;
    int_omega_body_1[2] = 0;
    int_omega_tilde_body_1[1,0] = int_omega_body_1[2];
    int_I_body_1[1,2] = (Inertia * T_visual_1[1,1] * T_visual_1[2,1]);
    int_omega_body_1[1] = qd;
    int_omega_tilde_body_1[2,1] = int_omega_body_1[0];
    int_omegad_C_body_1[2] = (qd * int_omega_tilde_body_1[2,1]);
    int_omega_tilde_body_1[0,0] = 0;
    int_omega_tilde_body_1[2,0] = (-int_omega_body_1[1]);
    int_omega_tilde_body_1[0,1] = (-int_omega_body_1[2]);
    int_omega_tilde_body_1[0,2] = int_omega_body_1[1];
    int_alpha_C_world[1] = 0;
    int_omega_tilde_body_1[2,2] = 0;
    T_visual_1[1,2] = 0;
    int_l_body_1[1] = (-(0.5 * l * T_visual_1[1,2]));
    int_omegad_C_body_1[0] = (qd * int_omega_tilde_body_1[0,1]);
    int_G_C_body_1[1] = (m * ((((int_omega_tilde_body_1[0,1] * int_omega_tilde_body_1[1,0]) + (int_omega_tilde_body_1[1,2] * int_omega_tilde_body_1[2,1]) + Math.Exp(int_omega_tilde_body_1[1,1],2)) * int_l_body_1[1]) + (((int_omega_tilde_body_1[0,0] * int_omega_tilde_body_1[1,0]) + (int_omega_tilde_body_1[1,0] * int_omega_tilde_body_1[1,1]) + (int_omega_tilde_body_1[1,2] * int_omega_tilde_body_1[2,0]) + int_omegad_C_body_1[2]) * int_l_body_1[0]) + (((int_omega_tilde_body_1[0,2] * int_omega_tilde_body_1[1,0]) + (int_omega_tilde_body_1[1,1] * int_omega_tilde_body_1[1,2]) + (int_omega_tilde_body_1[1,2] * int_omega_tilde_body_1[2,2]) - int_omegad_C_body_1[0]) * int_l_body_1[2]) + int_alpha_C_world[1]));
    int_alpha_C_world[2] = g;
    int_omegad_C_body_1[1] = (qd * int_omega_tilde_body_1[1,1]);
    int_G_C_body_1[2] = (m * ((((int_omega_tilde_body_1[0,2] * int_omega_tilde_body_1[2,0]) + (int_omega_tilde_body_1[1,2] * int_omega_tilde_body_1[2,1]) + Math.Exp(int_omega_tilde_body_1[2,2],2)) * int_l_body_1[2]) + (((int_omega_tilde_body_1[0,0] * int_omega_tilde_body_1[2,0]) + (int_omega_tilde_body_1[1,0] * int_omega_tilde_body_1[2,1]) + (int_omega_tilde_body_1[2,0] * int_omega_tilde_body_1[2,2]) - int_omegad_C_body_1[1]) * int_l_body_1[0]) + (((int_omega_tilde_body_1[0,1] * int_omega_tilde_body_1[2,0]) + (int_omega_tilde_body_1[1,1] * int_omega_tilde_body_1[2,1]) + (int_omega_tilde_body_1[2,1] * int_omega_tilde_body_1[2,2]) + int_omegad_C_body_1[0]) * int_l_body_1[1]) + int_alpha_C_world[2]));
    int_alpha_C_world[0] = 0;
    int_G_C_body_1[0] = (m * ((((int_omega_tilde_body_1[0,1] * int_omega_tilde_body_1[1,0]) + (int_omega_tilde_body_1[0,2] * int_omega_tilde_body_1[2,0]) + Math.Exp(int_omega_tilde_body_1[0,0],2)) * int_l_body_1[0]) + (((int_omega_tilde_body_1[0,0] * int_omega_tilde_body_1[0,1]) + (int_omega_tilde_body_1[0,1] * int_omega_tilde_body_1[1,1]) + (int_omega_tilde_body_1[0,2] * int_omega_tilde_body_1[2,1]) - int_omegad_C_body_1[2]) * int_l_body_1[1]) + (((int_omega_tilde_body_1[0,0] * int_omega_tilde_body_1[0,2]) + (int_omega_tilde_body_1[0,1] * int_omega_tilde_body_1[1,2]) + (int_omega_tilde_body_1[0,2] * int_omega_tilde_body_1[2,2]) + int_omegad_C_body_1[1]) * int_l_body_1[2]) + int_alpha_C_world[0]));
    C_ = ((((int_I_body_1[0,0] * int_omega_tilde_body_1[1,0]) + (int_I_body_1[1,0] * int_omega_tilde_body_1[1,1]) + (int_I_body_1[2,0] * int_omega_tilde_body_1[1,2])) * int_omega_body_1[0]) + (((int_I_body_1[0,1] * int_omega_tilde_body_1[1,0]) + (int_I_body_1[1,1] * int_omega_tilde_body_1[1,1]) + (int_I_body_1[2,1] * int_omega_tilde_body_1[1,2])) * int_omega_body_1[1]) + (((int_I_body_1[0,2] * int_omega_tilde_body_1[1,0]) + (int_I_body_1[1,2] * int_omega_tilde_body_1[1,1]) + (int_I_body_1[2,2] * int_omega_tilde_body_1[1,2])) * int_omega_body_1[2]) + (int_G_C_body_1[0] * int_l_tilde_body_1[1,0]) + (int_G_C_body_1[1] * int_l_tilde_body_1[1,1]) + (int_G_C_body_1[2] * int_l_tilde_body_1[1,2]) + (int_omegad_C_body_1[0] * int_I_body_1[1,0]) + (int_omegad_C_body_1[1] * int_I_body_1[1,1]) + (int_omegad_C_body_1[2] * int_I_body_1[1,2]));
    qdd = (-(C_ * Math.Exp(M_,(-1))));
    der_qd = qdd;
    der_q = qd;


    /* set return values */
    yd[0] = der_q;
    yd[1] = der_qd;

    return 0;
}
